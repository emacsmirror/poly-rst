
(require 'poly-rst)
(require 'polymode-test-utils)

(ert-deftest poly-rst/spans-at-borders ()
  (pm-test-run-on-file poly-rst-mode "code-blocks.rst"
    (pm-map-over-spans
     (lambda (span)
       (let* ((sbeg (nth 1 span))
              (send (nth 2 span))
              (range1 (pm-innermost-range sbeg))
              (range2 (pm-innermost-range send)))
         (should (eq sbeg (car range1)))
         (should (eq send (cdr range1)))
         (unless (eq send (point-max))
           (should (eq send (car range2)))))))))

(ert-deftest poly-rst/spans-at-narrowed-borders ()
  (pm-test-run-on-file poly-rst-mode "code-blocks.rst"
    (pm-map-over-spans
     (lambda (span)
       (pm-with-narrowed-to-span span
         (let* ((range1 (pm-innermost-range (point-min)))
                (range2 (pm-innermost-range (point-max))))
           (should (eq (car range1) (point-min)))
           (should (eq (cdr range1) (point-max)))
           (should (eq (car range2) (point-min)))
           (should (eq (cdr range2) (point-max)))))))))

(ert-deftest poly-rst/spans-at-point-max ()
  (pm-test-run-on-file poly-rst-mode "code-blocks.rst"
    (goto-char (point-max))
    (pm-switch-to-buffer)

    (let ((span (pm-innermost-span (point-max))))
      (should (eq (car span) nil))
      (should (eq (nth 2 span) (point-max)))
      (delete-region (nth 1 span) (nth 2 span)))
    
    (let ((span (pm-innermost-span (point-max))))
      (should (eq (car span) 'body))
      (should (eq (nth 2 span) (point-max)))
      (delete-region (nth 1 span) (nth 2 span)))

    (let ((span (pm-innermost-span (point-max))))
      (should (eq (car span) 'head))
      (should (eq (nth 2 span) (point-max)))
      (delete-region (nth 1 span) (nth 2 span)))

    (let ((span (pm-innermost-span (point-max))))
      (should (eq (car span) nil))
      (should (eq (nth 2 span) (point-max)))
      (delete-region (nth 1 span) (nth 2 span)))

    (let ((span (pm-innermost-span (point-max))))
      (should (eq (car span) 'body))
      (should (eq (nth 2 span) (point-max)))
      (delete-region (nth 1 span) (nth 2 span)))

    (let ((span (pm-innermost-span (point-max))))
      (should (eq (car span) 'head))
      (should (eq (nth 2 span) (point-max)))
      (delete-region (nth 1 span) (nth 2 span)))))

(ert-deftest poly-rst/change-spans ()
  (let ((failed-faces '((rst-level-2)))
        (polymode-default-inner-mode 'python-mode))
    (pm-test-run-on-file poly-rst-mode "code-blocks.rst"
      (pm-test-faces failed-faces)
      (goto-char (point-min))
      (re-search-forward ".. code-block::")
      (insert ":")
      (pm-test-faces failed-faces)
      (delete-backward-char 1)
      (pm-test-faces failed-faces)
      (backward-word 1)
      (delete-backward-char 1)
      (pm-test-faces failed-faces)
      (insert "-")
      (pm-test-faces failed-faces)
      (forward-line 3)
      (pm-switch-to-buffer)
      (should (eq major-mode 'python-mode)))))

(ert-deftest poly-rst/correct-inner-mode ()
  (let ((polymode-default-inner-mode 'python-mode))
    (pm-test-run-on-file poly-rst-mode "code-blocks.rst"
      (goto-char (point-min))
      (pm-switch-to-buffer)
      (should (eq major-mode 'rst-mode))
      (re-search-forward "import sys")
      (forward-line 1)
      (pm-switch-to-buffer)
      (should (eq major-mode 'rst-mode))
      (re-search-forward "import sys")
      (forward-line 1)
      (pm-switch-to-buffer)
      (should (eq major-mode 'python-mode))
      (re-search-forward "import sys")
      (forward-line 1)
      (pm-switch-to-buffer)
      (should (eq major-mode 'python-mode))
      (re-search-forward "print \"Hello world\"")
      (pm-switch-to-buffer)
      (should (eq major-mode 'python-mode))
      (re-search-forward "documentclass{beamer}")
      (pm-switch-to-buffer)
      (should (eq major-mode 'latex-mode))
      (re-search-forward "LDLIBS=-lxcb")
      (pm-switch-to-buffer)
      (should (eq major-mode 'makefile-mode))
      (re-search-forward "(defparameter \\*small\\* 1)")
      (pm-switch-to-buffer)
      (should (eq major-mode 'lisp-mode))
      (re-search-forward "srt-renumber-file")
      (pm-switch-to-buffer)
      (should (eq major-mode 'emacs-lisp-mode)))))
